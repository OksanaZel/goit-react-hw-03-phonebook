{"version":3,"sources":["components/App/App.styled.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js"],"names":["Container","styled","div","SectionTitle","h2","Title","title","ContactListContainer","ContactListItem","Button","ContactList","contacts","onDeleteContact","map","id","name","number","onClick","Form","Label","Input","ContactForm","onSubmit","initialValues","validate","values","errors","test","setSubmitting","resetForm","touched","handleChange","handleSubmit","isSubmitting","type","onChange","value","disabled","Filter","App","state","initialContacts","filter","addContact","find","contact","toLowerCase","alert","nanoid","setState","changeFilter","e","currentTarget","getVisibleContact","normalizedFilter","includes","deleteContact","contactId","prevState","conatcts","localStorage","getItem","parsedConatcts","JSON","parse","this","prevProps","setItem","stringify","visibleContacts","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3734fc2e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\nwidth: 900px;\r\nbackground: #FFFFFF;\r\nbox-shadow: 0px 4px 10px #2196f3;\r\nmargin: 20px auto;\r\npadding: 25px;\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const SectionTitle = styled.h2`\r\nmargin-bottom: 25px;\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SectionTitle } from \"./Title.styled\";\r\n\r\nfunction Title({title}) {\r\n    return (\r\n        <SectionTitle>{title}</SectionTitle>\r\n    )\r\n}\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Title;\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const ContactListContainer = styled.ul`\r\ndisplay: flex;\r\nflex-direction: column;\r\n`;\r\n\r\nexport const ContactListItem = styled.li`\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\nmargin-bottom: 25px;\r\nmax-width: 450px;\r\n\r\n& svg {\r\n    width: 18px;\r\n    height: 18px;\r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 200px;\r\n  padding: 2px 32px;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n  border-radius: 4px;\r\n  border-style: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 1.88;\r\n  letter-spacing: 0.06em;\r\n  color: #ffffff;\r\n  background-color: #2196f3;\r\n\r\n  & svg {\r\n    color: #fff;\r\n    height: 18px;\r\n    width: 18px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GoPrimitiveDot } from \"react-icons/go\";\r\nimport {AiOutlineUserDelete} from \"react-icons/ai\"\r\nimport { ContactListContainer, ContactListItem, Button} from \"./ContactList.styled\";\r\n\r\nfunction ContactList({contacts, onDeleteContact}) {\r\n    return (\r\n        <ContactListContainer>\r\n            {contacts.map(({id, name, number}) => (\r\n                <ContactListItem key={id}>\r\n                    <GoPrimitiveDot/>\r\n                    {name}: {number}\r\n                    <Button onClick={() => onDeleteContact(id)}>\r\n                        <AiOutlineUserDelete />\r\n                        Delete</Button>\r\n                </ContactListItem>\r\n            ))}\r\n        </ContactListContainer>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n    })),\r\n    onDeleteContact: PropTypes.func,\r\n}\r\n\r\nexport default ContactList;\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Form = styled.form``;\r\n\r\nexport const Label = styled.label`\r\ndisplay: flex;\r\nflex-direction: column;\r\nmax-width: 400px;\r\nmargin-bottom: 25px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\nborder: 1px solid lightblue;\r\nborder-radius: 4px;\r\nfont-size: 20px;\r\n\r\n&:focus {\r\n    outline: none;\r\n    border: 1px solid #2196f3;\r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 25px;\r\n  min-width: 200px;\r\n  padding: 2px 32px;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n  border-radius: 4px;\r\n  border-style: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 1.88;\r\n  letter-spacing: 0.06em;\r\n  color: #ffffff;\r\n  background-color: #2196f3;\r\n  \r\n  & svg {\r\n      height: 18px;\r\n      width: 18px;\r\n      margin-right: 10px;\r\n  }\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {IoPersonAddOutline} from \"react-icons/io5\"\r\nimport { Formik } from \"formik\";\r\nimport { Form, Label, Input, Button } from \"./ContactForm.styled\";\r\n\r\nexport default function ContactForm({onSubmit}) {\r\n  return (\r\n    <Formik\r\n       initialValues={{ name: '', number: '' }}\r\n       validate={values => {\r\n         const errors = {};\r\n         if (!values.name) {\r\n           errors.name = \"Обязательное поле\";\r\n         } else if (!values.number) {\r\n           errors.number = \"Обязательное поле\";\r\n         } else if (\r\n           !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(values.name)\r\n         ) {\r\n           errors.name = 'Имя может состоять только из букв, апострофа, тире и пробелов.';\r\n         } else if (\r\n           !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(values.number)\r\n         ) {\r\n           errors.number = 'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +';\r\n         }\r\n         return errors;\r\n       }}\r\n       onSubmit={(values, { setSubmitting, resetForm }) => {\r\n         \r\n        onSubmit(values);\r\n         setSubmitting(false);\r\n         resetForm();\r\n         \r\n       }}\r\n     >\r\n       {({\r\n         values,\r\n         errors,\r\n         touched,\r\n         handleChange,\r\n         handleSubmit,\r\n         isSubmitting,\r\n       }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Label> Name\r\n           <Input\r\n             type=\"text\"\r\n             name=\"name\"\r\n             onChange={handleChange}\r\n             value={values.name}\r\n            />\r\n          </Label>\r\n          {errors.name && touched.name && errors.name}\r\n          <Label> Number\r\n           <Input\r\n             type=\"tel\"\r\n             name=\"number\"\r\n             onChange={handleChange}\r\n             value={values.number}\r\n            />\r\n            </Label>\r\n           {errors.number && touched.number && errors.number}\r\n          <Button type=\"submit\" disabled={isSubmitting}>\r\n            <IoPersonAddOutline /> \r\n            Add contact\r\n           </Button>\r\n         </Form>\r\n       )}\r\n     </Formik>\r\n  )\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label, Input} from \"../ContactForm/ContactForm.styled\";\r\n\r\nfunction Filter({value, onChange}) {\r\n    return (\r\n        <Label>Find contacts by name\r\n          <Input type=\"text\" value={value} onChange={onChange}/>\r\n        </Label>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Container } from \"./App.styled\";\nimport Title from \"../Title\";\nimport ContactList from \"../ContactList\";\nimport ContactForm from \"../ContactForm\";\nimport Filter from \"../Filter\";\nimport initialContacts from \"../data/initialContacts.json\";\n\nexport default class App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: \"\",\n  }\n\n  addContact = ({ name, number }) => {\n\n    if (this.state.contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      return\n    }\n\n      const contact = {\n        id: nanoid(5),\n        name,\n        number,\n      }\n    \n    this.setState(({contacts}) => ({\n      contacts: [contact, ...contacts],\n    }));    \n  }\n\n  changeFilter = (e) => {\n    this.setState({filter: e.currentTarget.value})\n  }\n\n  getVisibleContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }))\n  }\n\n  componentDidMount() {\n    const conatcts = localStorage.getItem(\"contacts\");\n    const parsedConatcts = JSON.parse(conatcts);\n    \n    if (parsedConatcts) {\n      this.setState({ contacts: parsedConatcts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContact();\n\n    return (\n      <Container>\n        <Title title={\"Phonebook\"} />\n        <ContactForm onSubmit={this.addContact} />\n        <Filter value={filter} onChange={this.changeFilter} />\n        <Title title={\"Contacts\"} />\n        <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact}/>\n      </Container>\n    )\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}